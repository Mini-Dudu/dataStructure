package stack

import "fmt"

//用顺序栈实现计算一个数学表达式

//实现将中缀表达式转成后缀表达式
func Transition(srt string) string {
	//一:初始化一个栈,用于保存暂时还不能确定的运算顺序的运算符
	//二:从左到右处理各个元素,直到末尾,可能遇到三种情况:
		//1.遇到操作符,直接假如后缀表达式.
		//2.遇到界线符,遇到 "(" 直接入栈,遇到 ")" 则依次弹出栈内运算符并加入后缀表达式,直到弹出 "(" 为止. 注."(" 不加入后缀表达式.
		//3.遇到运算符. 依次弹出栈中优先级高于或等于当前运算符的所有运算符,并加入后缀表达式,若碰到 "(" 或栈空则停止.之后在把当前运算符入栈
	//按上述方式处理完表达式后,若栈中还有运算符,则将剩余运算符依次弹出,并加入后缀表达式.
	return ""
}


//用栈实现后缀表达式的计算
func Calculate(str string) int {

	//1.从左往右扫描后缀表达式,知道处理完所有元素
	//2.若扫描到操作数,则压入栈,并回到 1 ,否则执行 3
	//3.若扫描到运算符,则弹出两个栈顶元素,执行相应计算,预算结果重新入栈,再返回 1

	PostfixExpression := Transition(str)

	fmt.Println(PostfixExpression)
	return 0
}